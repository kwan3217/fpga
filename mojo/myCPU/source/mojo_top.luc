module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    input cpu_din,
    output cpu_addr,
    output cpu_dout,
    output cpu_wr,
    output cpu_rd
  ) {
 
  sig rst;                  // reset signal
  sig dout[32];             // Data out of processor
  sig write;                // Memory write
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
 
    .rst(rst) {
      cortexM0 cpu;        
      dff led_reg[8]; // storage for LED value
      dff bit[5];
    }
//    simple_ram ram(#SIZE(32),#DEPTH(16384),.write_data(dout));
  }
 
  always {
    reset_cond.in = ~rst_n;   // input raw inverted reset signal
    rst = reset_cond.out;     // conditioned reset
 
    spi_miso = bz;            // not using SPI
    spi_channel = bzzzz;      // not using flags
    avr_rx = bz;              // not using serial port
 
//    cpu.din = ram.read_data;           // default to don't care
//    write=cpu.write;

//    ram.address=13hxx;
//    ram.write_en=0;
    cpu_addr=cpu.address[bit.q];
    cpu.din[bit.q]=cpu_din;
    cpu_dout=cpu.dout[bit.q];
    cpu_wr=cpu.write;
    cpu_rd=0;
    bit.d=bit.q+1;
//    if(cpu.address[31:16]==16h0000) {
//      //This is a RAM access
//      ram.address[12:0]=cpu.address[14:2];
//      ram.write_en=cpu.write;
//    }
    //LED is a memory-mapped register at 0xE000'0000
//    if(cpu.address==32hE0000000) {
//      led_reg.d=cpu.dout[7:0];
//    } else {
//      led_reg.d=led_reg.q;
//    }
    led = led_reg.q;          // connect LEDs to led_reg
  }
}